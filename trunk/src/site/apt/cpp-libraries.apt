            ------
            C++ Libraries
            ------
            Sami Badawi
            ------
            2008/09/03
            ------

C++ Libraries
  
  The goal is to find libraries that can compete with ImageJ in both features
  and simplicity. More specific it needs to be:

  * Cross platform

  * Close to ImageJ in functionality
  
  * Simple to program
  
  * Do not require too much duck tape to work together
  
  * Do not have a steep learning curve
  
  * Do not have a complex build process
  
  []
  
  This page will investigate some pro and cons for different libraries based on
  how they satisfy the above criteria.
  
* First libraries choice 
  
  * OpenCV for vision algorithms
  
  * GIL for writing new image processing plugin

  * Google C++ Testing Framework

  * Boost for all other libraries
  
  []
  
** GUI idea 1: GTK and GIMP plugin

  * GTK or GTKMM for a rudimentary workbench
  
  * GIMP plugin for a full featured workbench with macro languages
  
  []
  
** GUI idea 2: FLTK and Adobe PhotoShop plugin

  * FLTK for a rudimentary workbench
  
  * Adobe PhotoShop plugin for a full featured workbench with macro languages
  
  []
  
  If this is a successful combination that should be pretty equivalent to what
  you have in ImageJ, but a little harder to work with.
  
* Image libraries  
  
  * OpenCV
  
  * OpenFrameworks
  
  * GIL
  
  []
  
** OpenCV, Open Computer Vision
  
  {{{http://opencvlibrary.sourceforge.net/} OpenCV}} is written by Intel. 
  It is simple to use and comes with a lot of algorithms.
  
** OpenFrameworks
  
  {{{http://www.openframeworks.cc/} OpenFrameworks}} is a C++ based image 
  processing tool for artists, close to {{{http://processing.org/} Processing}} 
  that is written in Java. This is built on top of OpenCV.
  
  Seems to be in a very early stage but people are using it.
  
** GIL, Generic Image Library
  
  {{{http://opensource.adobe.com/wiki/display/gil/Generic+Image+Library} Generic Image Library}} 
  was developed by Adobe but a part of {{{http://www.boost.org/} Boost}} since
  1.35.  This uses template programming and is written so that you can write an
  algorithm once and have it be implemented efficiently for many different 
  image types.  This is something that you cannot do in ImageJ. The price is 
  that it is programmed with advanced templates.
  
  Should be able to run with OpenCV.
  
* GUI workbench options
  
  It is important to have a workbench where it is easy to try out the 
  algorithms. It can either be rudimentary so you can load an image and run a 
  sequence of image operation using a menu system or it can be full fledged
  workbench:

  * Run image operations do loading of several file formats

  * Drawing 

  * Comes with a whole set up image processing operations
  
  []

  ImageJ serves full fledged workbench in Java.  

  Here are some options for GUI.  ShapeLogic could work with more than one, 
  e.g. a lightweight gui for a rudimentary workbench, and GIMP for a full fledged
  workbench.

  * GTK+ GIMP toolkit
  
  * GTKMM C++ wrapper around GTK+
  
  * GIMP plugin
  
  * FLTK
  
  * HighGui from OpenCV
  
  * PhotoShop plugin
  
  * wxWidget

  []
  
** FLTK Fast Light Toolkit
  
  {{{http://www.fltk.org/} FLTK}} is light to work with. This is built on top of
  Windows API or X11.
  Could be enough for a simple workbench for a ShapeLogic C++ port.
  
** wxWidget

  {{{http://www.wxwidgets.org/} wxWidgets}} is a full featured GUI toolkit, built
  on top of native toolkits: Win32, Mac OS X, GTK+, X11, Motif, WinCE and more.
  The programming style is close to Windows MFC programming.

*** Issues

  It seems a little heavier than FLTK.
  
** GIMP plugin
  
  {{{http://www.gimp.org/} GIMP - The GNU Image Manipulation Program}}
  is an open source drawing program that works with external plugins.

  This would be a full fledged workbench.

*** Issues

  ShapeLogic cannot be linked to GIMP since it is GPL, but you could have a 
  wrapper around plugins in order to access them as GIMP plugins.
  
  The plugin works with tiles, which gives good performance, but does not fit
  well with either the way OpenCV or GIL are processing images.
  
** GTK, GIMP toolkit

  {{{http://www.gtk.org/} GTK}} is a full featured GUI toolkit working on most 
  platforms. 

*** Issues

  It is written in C and has a homegrown object system, which is not type safe.

** GTKMM, GIMP toolkit with C++ wrapper

  {{{http://www.gtkmm.org}GTKMM}} is a C++ wrapper around GTK. Programming in
  GTKMM is a lot more natural to C++ programmers.

*** Issues

  The class hierarchy is somewhat deep since it is build on top of GTK.
  It seems a little heavier than FLTK.
  
** PhotoShop plugin
  
  {{{http://www.adobe.com/products/photoshop/index.html} Adobe Photoshop}} 
  would be a full fledged workbench.
  
  PhotoShop is not open source but there should not be any problem when using 
  it as a platform.
  Since PhotoShop is the standard image manipulation tool, this could be a good
  way to make ShapeLogic algorithms available to a wider audience.

*** Issues
  
  The PhotoShop API is not freely available, you have to apply to get it.
  
** HighGui from OpenCV
  
  Very lightweight. There is some functionality for displaying images and an
  event handler for mouse events. 

*** Issues
  
  It does not seem to have a menu system, which is essential for a rudimentary workbench.
  
* Google C++ Testing Framework
  
  {{{http://code.google.com/p/googletest/}Google C++ Testing Framework}} is a
  framework for writing C++ unit tests. Based on the xUnit architecture.
  It has a strong focus on simplicity and terse code.

* Boost
  
  {{{http://www.boost.org} Boost}} 
  is a collection of open source C++ libraries, a place where new features of
  C++ is implemented and tried before becoming part of the C++ standard.
  
  This makes use of some very advanced and new programming techniques e.g.
  
  * Template meta programming
  
  * Lambda functions

  * Concepts 

  * Traits
  
  []
  
  It contains a lot of functional programming features that should be helpful 
  for the lazy stream library.
  
** Problems with Boost

  * Boost is a good stress test for your compiler. Some classes in boost would 
  crash GCC 3.1 and 3.2. 

  * You would not catch all errors at compile time for template code. Concepts is
  a new way to alleviate this problem.

  * Template code has been hard to debug.
  
  []
  
  
  
  
  
  
  
  
  
  
  
  
  
  
