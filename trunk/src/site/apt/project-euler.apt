            ------
            Project Euler
            ------
            Sami Badawi
            ------
            2008/01/18
            ------

Project Euler

  {{{http://projecteuler.net}Project Euler}} 
  is a list of 178, mathematical problems, that can be solved by computers.
  They vary in complexity from simple to hard.
  The goal is to test ShapeLogic's new declarative and functional constructs on real 
  problems and make sure they are terse and intuitive.
  
* Remarks

  So each problem will be turned into a junit test. In the package: 
  org.shapelogic.calculation.euler
  
  This code is not part of ShapeLogic 0.8, but will be released in ShapeLogic 0.9.
  It will be checked into SVN when it is stable. 
  
  The problems will be solved sequentially, given that the difficulty level are 
  easier for the first.
  
  The solutions will be posted here when they are done. 
  
** Comparison to the Scala language
  
  The blog {{http://scala-blogs.org/2007/12/project-euler-fun-in-scala.html}} 
  is showing off the strength of {{{http://www.scala-lang.org} Scala}} to solve 
  some of the problems defined in Project Euler. This is as easy as it gets.
  The APL, Erlang, Haskell, Mathematica, Perl and Python programmer will surely 
  argue. This is the benchmark by which to measure ShapeLogic's success.
  
  The solution in Scala clearly use less code, but conceptually there is not a
  big gap in complexity.
  Especially when you are using Eclipse which will generate the methods you have 
  to override in order to customize the lazy stream constructs.
  Java is inherently verbose, so it will never be that terse.
  
  This is the assessment based on a few first simple examples, maybe 
  ShapeLogic will buckle under more complex examples.
  
** Commonly used classes
  
*** NaturalNumberBrick
  
  Generate a stream of natural numbers, can take a start and stop number 
  
*** BaseListFilterBrick
  
  A filter that takes an Iterator as input, and an evaluate method.
  
*** SumAccumulator
  
  An accumulator that run through an Iterator and add all the number in it.
  
* 1 Add all the natural numbers below 1000 that are multiples of 3 or 5
  
** Solution in ShapeLogic

+-----------------------------+
NaturalNumberBrick naturalNumberBrick = new NaturalNumberBrick(1,999);
ListFilterBrick<Integer> filter = new BaseListFilterBrick<Integer>(naturalNumberBrick) {
	public boolean evaluate(Integer object) {return object % 3 == 0 || object % 5 == 0;}
};
SumAccumulator accumulator = new SumAccumulator(filter);
System.out.println(accumulator.getValue());
+-----------------------------+
  
* 2 Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed one million

** Solution in ShapeLogic

+-----------------------------+
BaseListBrick<Object,Integer> fibonacci = new BaseListBrick<Object,Integer>(){
	{ _list.add(1); _list.add(2);}
	public Integer invoke(Object input, int index) {return get(index-2) + get(index-1);}
};
ListFilterBrick<Integer> filter = new BaseListFilterBrick<Integer>(fibonacci) {
	public boolean evaluate(Integer object) { return object % 2 == 0; }
};
SumAccumulator accumulator = new SumAccumulator(filter) {
	{_inputElement = 0;}
	public boolean hasNext(){ return _inputElement < 1000000; }
};
System.out.println(accumulator.getPreviousValue()); //Test fails after value go over 1000000
+-----------------------------+
  
* 3 Find the largest prime factor of 317584931803

+-----------------------------+
NaturalNumberBrick naturalNumberBrick = new NaturalNumberBrick(2,null);
BaseAccumulator<Integer,Long> accumulator = new BaseAccumulator<Integer,Long>(naturalNumberBrick) {
	long theNumber = 317584931803l;
	{_inputElement = 0;}
	public Long accumulate(Integer element, Long out) {
		while (theNumber % element == 0l) { theNumber /= element; }
		return theNumber;
	}
	public boolean hasNext(){ return _inputElement <= theNumber; }
};
System.out.println(accumulator.getValue());
+-----------------------------+

* 4 Find the largest palindrome made from the product of two 3-digit numbers

+-----------------------------+
public void testProblem4() {
	NaturalNumberBrick naturalNumberBrick = new NaturalNumberBrick(1,999);
	BaseListBrick2<Integer, Integer, Integer> cartesianProduct = 
		new BaseListBrick2<Integer, Integer, Integer>(naturalNumberBrick, naturalNumberBrick) {
		public Integer invoke(Integer input0, Integer input1, int index) {return input0 * input1;}
	}; 
	ListFilterBrick<Integer> filter = new BaseListFilterBrick<Integer>(cartesianProduct) {
		public boolean evaluate(Integer object) {return palindrome(object);}
	};
	MaxAccumulator accumulator = new MaxAccumulator(filter);
	System.out.println(accumulator.getValue());
}

public static boolean palindrome(int input) {
	String inputAsStreing = "" + input;
	int stringLength = inputAsStreing.length();
	for (int i=0; i< stringLength/2; i++) {
		if (inputAsStreing.charAt(i) != inputAsStreing.charAt(stringLength-1-i))
			return false;
	}
	return true;
}
+-----------------------------+

* 5 What is the smallest number divisible by each of the numbers 1 to 20?

* 6 What is the difference between the sum of the squares and the square of the sums?

* 7 Find the 10001st prime

* 8 Discover the largest product of five consecutive digits in the 1000-digit number

* 9 Find the only Pythagorean triplet, {a, b, c}, for which a + b + c = 1000

* 10 Calculate the sum of all the primes below one million
