<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Frequently Asked Questions">
  <part id="ProblemRunningShapeLogic">
    <faq id="problemRunning">
      <title>Problem running ShapeLogic</title>
      <question>Why won't ShapeLogic run as a plug-in for ImageJ?</question>
      <answer>
        <p>
          The problem is that there are several jar files that are needed for it to run.
          This is described on the
          <a href="./getting-started.html">Getting started</a> 
          page.
        </p>
        <source>
          antlr-runtime-3.0.jar
          commons-collections-3.2.jar
          commons-jexl-1.1.jar
          commons-logging-1.0.4.jar
          commons-math-1.1.jar
          guice-1.0.jar
        </source>
      </answer>
    </faq>
    <faq id="problemRunningOnMac">
      <title>Problem running ShapeLogic on a Max</title>
      <question>Why won't ShapeLogic run as a plug-in for ImageJ on my Mac?</question>
      <answer>
        <p>
		The problem is that Shapelogic has been built to require
		Java 1.6 and the Mac comes pre installed with Java 1.5.
		You can get an update to Java 1.6 for OS X 10.5. See
		<a href="http://developer.apple.com/java/">http://developer.apple.com/java/</a>
        </p><p>
		Then you need to set ImageJ to use Java 1.6. This is done in the
		ImageJ.cfg file under ImageJ dir.
        </p>
      </answer>
    </faq>
    <faq id="jdkversion">
      <question>What version of Java JDK does ShapeLogic work with?</question>
      <answer>
        <p>
		  ShapeLogic is compiled with JDK version 1.6. There are parts of it 
		  that is using the JSR 223 scripting framework, introduced in 1.6.
		  It might be possible to compiled it with JDK 1.5.<br/>
        </p>
      </answer>
    </faq>
    <faq id="installSnapshot">
      <question>How do I install a snapshot version of ShapeLogic?</question>
      <answer>
        <p>
          <lu>
            <li>Download the jar file.</li>
            <li>Go to ./ImageJ/plugins/shapelogic.</li>
            <li>Append the word old to the current version e.g.: shapelogic__-0.7.jar.old</li>
            <li>Copy the downloaded or compiled version to ./ImageJ/plugins/shapelogic</li>
          </lu>
        </p>
      </answer>
    </faq>
  </part>

  <part id="Build">
    <title>Build</title>
    
    <faq id="buildingWithMave">
      <question>What tools do I need to build ShapeLogic?</question>
      <answer>
        <p>
	      ShapeLogic is built using <a href="http://maven.apache.org">Maven 2</a>.
        </p>
        <p>
          This makes several build tasks very easy, so this is the recommended 
          way doing builds, but the code should run fine without Maven.
        </p>
        <p>
          Currently the project is set up to work directly with Eclipse 3.3,
          NetBeans 6.0 / 6.1, Java 1.6, 
          but you can use: IntelliJ, JBuilder, emacs or vi.
        </p>
      </answer>
    </faq>

    <faq id="buildCommands">
      <question>How do you build with Maven 2?</question>
      <answer>
        <p>
          In order to do the following:
          <ol>
            <li>runs the unit tests locally</li>
            <li>runs the unit tests locally, and if they passes it will create the jar file</li>
            <li>runs the unit tests locally and install ShapeLogic to local repository</li>
          </ol>
          Call these commands.
        <source>
          mvn test
          mvn package
          mvn install
        </source>
        </p>
      </answer>
    </faq>
    <faq id="buildingProjectSite">
      <question>How is this project site created?</question>
      <answer>
        <p>
		  The ShapeLogic site is created using an <a href="http://maven.apache.org/doxia/references/apt-format.html">Almost Plain Text format</a>.
		  The apt files are stored in the directory: shapelogic/src/site.<br/>
		  Changes can be tracked in SVN<br/>

          For more details look here:
          <a href="./writing-documentation.html">Writing documentation</a> 
        </p>
        <p>
		  To generate the site run the following command.
        <source>
          mvn site
        </source>
        </p>
      </answer>
    </faq>
  </part>
  
  <part id="Dependencies">
    <title>Dependencies</title>
    
    <faq id="librariesDependencies">
      <question>Are all the libraries dependencies really needed?</question>
      <answer>
        <p>
          Some of the libraries are only used for in tests.
          Most importantly Hibernate, which have a lot of dependencies on its own.
          Given that the current database interactions are very light this 
          could easily be done by JDBC or if rules are stored in flat files or 
          Java classes, that is not needed either.
        </p>
      </answer>
    </faq>

    <faq id="joinTeam">
      <question>Can I take dependent libraries out if its functionality is not used?</question>
      <answer>
        <p>
          Yes just take them out one at a time until something break.
        </p>
      </answer>
    </faq>
  </part>

  <part id="ImageJ">
    <title>ImageJ</title>
    <faq id="other1">
      <question>Does ShapeLogic work with other plug-ins for ImageJ?</question>
      <answer>
        <p>
          <lu>
            <li>ShapeLogic should work with other plug-ins.</li>
            <li>ShapeLogic uses off the shelf open source libraries when possible.</li>
            <li>ShapeLogic is a very lightweight framework.</li>
          </lu>
        </p>
      </answer>
    </faq>

    <faq id="withoutImageJ">
      <question>Does ShapeLogic work without ImageJ?</question>
      <answer>
        <p>
          It does for declarative programming. See <a href="./project-euler.html">Project Euler</a>.
        </p> <p>
		  Starting with version 1.1 ShapeLogic's image processing algorithms 
		  will be decoupled from ImageJ. The idea is not to redo ImageJ's 
		  functionality but to make ShapeLogic more modular. All of ShapeLogic's 
		  current image processing algorithms only use very simple image 
		  properties so they should apply outside of ImageJ.
        </p> <p>
          Not everything will work outside ImageJ. The letter match example has
          a first step that is a skeletonize algorithm that comes with ImageJ.
          In order to get that to work outside you will need to have another 
          implementation of this. 
        </p>
      </answer>
    </faq>
    
    <faq id="whenImageJ">
      <question>When should I use ShapeLogic with ImageJ?</question>
      <answer>
        <p>
          <a href="http://rsb.info.nih.gov/ij">ImageJ</a> is a fantastic tool 
          for image processing. Here are a few of its features:
          <lu>
            <li>A great GUI to experiment and work in</li>
            <li>Lots of free plugins</li>
            <li>Macro language to combine commands</li>
            <li>Active user and developer community</li>
            <li>Responsive mailing list</li>
            <li>Very easy to program</li>
            <li>It is free</li>
            <li>The code is available and in the public domain</li>
          </lu>
        </p>
      </answer>
    </faq>
    
    <faq id="whenWithoutImageJ">
      <question>When should I use ShapeLogic without ImageJ?</question>
      <answer>
        <p>
          <lu>
            <li>If you want to embed ShapeLogic in your application without adding ImageJ</li>
            <li>Sometimes it is hard to separate ImageJ from the ImageJ GUI</li>
            <li>You need to use some other library say 
            <a href="http://java.sun.com/docs/books/tutorial/2d">Java2D</a> or 
            <a href="http://java.sun.com/javase/technologies/desktop/media/jai">JAI</a></li>
          </lu>
        </p>
      </answer>
    </faq>
    
    <faq id="withoutImageProcessing">
      <question>Could ShapeLogic be used as a general declarative programming framework?</question>
      <answer>
        <p>
          One of the main objectives for ShapeLogic is to make a good hybrid of 
          Declarative programming and Object Oriented programming. 
          This is not specific to image processing or computer vision.
          Since ShapeLogic 0.9 the lazy stream logic framework was implemented, so 
          from then on it was possible that ShapeLogic would be applicable 
          to other domains. This is not a priority for the current development effort.<br />
          <br />
          There are many approaches to declarative, object oriented hybrids.
          Here is a short list of of some of them:<br />
          <br />
          <lu>
            <li><a href="http://java.sun.com/javafx">JavaFX</a> the new Java RIA.</li>
            <li><a href="http://www.prova.ws">Prova</a> is a Java Prolog hybrid.</li>
            <li>List Comprehension in <a href="http://www.python.org/doc/2.3.5/tut/node7.html">Python</a> and <a href="http://www.haskell.org/">Haskell</a>.</li> 
            <li><a href="http://msdn2.microsoft.com/en-us/netframework/aa904594.aspx">Microsoft LINQ</a></li>
            <li><a href="http://www.hibernate.org/">Hibernate</a> and ORM tools</li>
            <li><a href="http://labs.jboss.com/drools">Drools</a>: An open source RETE engine for the Java JVM.</li> 
            <li><a href="http://www.w3.org/TR/owl-features/">OWL</a>: Web Ontology Language.</li>
          </lu>
          
        </p>
      </answer>
    </faq>
  </part>

  <part id="Team">
    <title>ShapeLogic team</title>
    
    <faq id="joinTeam">
      <question>How can I join the ShapeLogic development team?</question>
      <answer>
        <p>
          See the 
          <a href="team.html">contact page</a> 
        </p>
      </answer>
    </faq>

  </part>
</faqs>