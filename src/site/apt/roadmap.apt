            ------
            Road map
            ------
            Sami Badawi
            ------
            2007/11/28

Road map

  This page is a about the direction that ShapeLogic might take, but it is not 
  set in stone.
  
  For more up to date information on ongoing development work look at this blog 
  {{{http://samibadawi.blogspot.com} Declarative Computer Vision}}.

* ShapeLogic v 1.0 soon to be released

  ShapeLogic v 0.9 introduced lazy streams a powerful declarative and 
  functional constructs. It tested them in pure form, on mathematics problems.
  All image processing and vision code still used goal driven logic.
  
  * Migrate rule databases for image processing. 
  Currently they are implemented as goal driven tasks with sub tasks.
  The new version will use the lazy streams that are simpler and more powerful.
  
  * When running ShapeLogic as an plugin for ImageJ add a menu item for loading
  and running external rules in flat file or database format.
  
  * Enabled use of
  {{{http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html}
  Java 6 Scripting}}
  for rule database, this should give the user access to the 25 scripting 
  languages that are supported

  * Make the annotation of shapes more loosely coupled

  * Get ShapeLogic into beta stage

  * Use Inversion of Control, to create object. IoC framework 
  {{{http://code.google.com/p/google-guice}Google Guice}}
  
  []

** Moving rule expression language from JEXL to Java 6 Scripting 
  
  Currently the rules in ShapeLogic are parsed from strings 
  {{{http://commons.apache.org/jexl}Apache Commons JEXL}} library.
  
  So the letter A would have a rule saying:

  polygon.holeCount == 1

  This is not trivial since a variable say polygon.holeCount could have 
  different values in different contexts.
  
  E.g. if there was a choice of 2 different thresholds levels, then in one 
  part of the choice tree we could have
  
  polygon.holeCount == 1 and in another we could have
  
  polygon.holeCount == 2.

  These user defined rules might be changed from using JEXL to using the 
  {{{http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html}Java 6 Scripting instead}}.

  JEXL has not been released for over 1 year, and it is a little awkward to 
  handle static fields and methods.
  It might also be better to let the user chose what scripting language they want to use.
  
  There are 25 scripting languages with varying levels of support available for scripting.
  Here are some of more well known: 
  {{{http://www.mozilla.org/rhino/scriptjava.html}JavaScript}}, 
  {{{http://www.beanshell.org}BeanShell}}, 
  {{{http://www.jython.org}Jython}}, 
  {{{http://groovy.codehaus.org}Groovy}}, 
  {{{http://jruby.codehaus.org}JRuby}} and
  {{{http://commons.apache.org/jexl}Apache Commons JEXL}}.

  One issue is that you cannot just use variable binding in a global scripting context.
  In the example from above if the variable polygon.holeCount does not exist in 
  the top context, Java 6 Scripting has some means to handle this problem.

  ShapeLogic 1.0 where should come with a test rule database for a separate 
  alphabet, say the Greek or the numbers.

* Next ShapeLogic example application

  The next example application for ShapeLogic will be medical image processing.
  
  Possibly a problem presented by a Neuroscientists doing Alzheimer's research. 
  It is a very interesting problem, but it would take at least a few months to finish it.
