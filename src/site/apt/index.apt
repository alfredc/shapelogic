            ------
            ShapeLogic
            ------
            Sami Badawi
            ------
            2007/08/06

ShapeLogic

  ShapeLogic is an open source toolkit for declarative programming, image 
  processing and computer vision.
  Started August 2007.
  
  Code hosted on {{http://code.google.com/p/shapelogic/}}.
  From there you can download both source files and binary distributions.  
  
  Join the {{{http://groups.google.com/group/shapelogic}ShapeLogic mailing list}} 
  for announcements, questions, bug reports, suggestions and feature requests.
  
* Main ideas and motivation

  ShapeLogic is a library for
   
  * {{{general-declarative.html} Declarative programming}} and lazy computations in Java
   
  * Image processing and computer vision
  
  []
  
  While ShapeLogic's declarative programming system was initially developed 
  for image processing and computer vision, it is widely applicable.
  It is currently difficult to combine declarative programming and image processing.
  ShapeLogic is intended as basic plumbing software that turns a logic engine 
  into a simple plugin component to ease entry into vision and image 
  analysis. ShapeLogic also fills gaps missing from current Java image 
  processing libraries, and uses a commercially friendly license.
  
  The current ShapeLogic working example demonstrates capital letter matching.  
  Future, differing, examples to come.

* Features

  * Declarative lazy stream driven logic engine with lazy computations
  
  * Specialized for the domain of image processing and computer vision
  
  * The user can store rules in either a flat file or database, decreasing user 
  reliance on Java programming
  
  * User rules are written with Java or the Java 6 Scripting interface JSR 223.   
  {{{http://groovy.codehaus.org}Groovy}}, 
  {{{http://jruby.codehaus.org}JRuby}}, 
  {{{http://www.mozilla.org/rhino}JavaScript}} have been tested 
  
  * Implementation of 2D geometry primitives, vectorization and segmentation
  
  * It is free (as in free speech and free beer)
  
  * Commercially friendly MIT open source software license, also called the X11 License
  
  * Annotations of point as different type of junctions, end points, hard or soft points

  * Annotations of lines as straight, curved, concave or inflection points

  * Programmed in Java
  
  * Can be used as a plugin for ImageJ, the leading Java open source project 
  used in medical image processing
  
  []

*  Requirements
  
  For running as a library for functional and declarative programming there are 
  no requirements.
  
  For running as a ImageJ plugin ShapeLogic uses the following libraries:
  
  * {{{http://rsb.info.nih.gov/ij/} ImageJ}} ShapeLogic is built on top of the 
  popular ImageJ framework, but could easily stand alone

  * {{{http://commons.apache.org/math/} Commons math}}: Math library for geometry

  * {{{http://www.antlr.org/} Antlr}}: For parsing build in filter language

  []
  
  Starting from ShapeLogic 1.1 you can run the image processing algorithms 
  {{{image-formats.html}outside ImageJ}}, 
  using just a BufferedImage. If you want to embed ShapeLogic in your 
  application.
  
** Optional requirements
  
  These are used in unit tests, builds or old versions of image processing 
  functionalities: 
  
  * {{{http://maven.apache.org/} Maven 2}}: Build system

  * {{{http://commons.apache.org/} Apache commons}}: {{{http://commons.apache.org/jexl/} JEXL}}, 
  {{{http://commons.apache.org/beanutils/} beanutils}}: For first version logic rules interpreter

  * {{{http://groovy.codehaus.org}Groovy}}, 
  {{{http://jruby.codehaus.org}JRuby}}, 
  {{{http://www.mozilla.org/rhino}JavaScript}}: 
  For second version logic rules interpreter

  * {{{http://www.hibernate.org/} Hibernate}} or JDBC: For database access
  
  * {{{http://code.google.com/p/google-guice/} Google Guice}}: Lightweight IoC framework
  
  * {{{http://hsqldb.org/} HSQLDB}} or {{{http://www.h2database.com/} H2}}: Embedded databases
  
  []
  
* Development Status: Beta

  * ShapeLogic is in Beta, as of version 1.0.

  * There is a working example where ShapeLogic is used for matching capital letters.
  
  * Image processing algorithms now work both in {{{image-formats.html}ImageJ and on Java's BufferedImage}}.

  * The API is still under development.

  * Contains a framework for declarative and functional programming.

  * ShapeLogic currently consists of 29,000 lines of Java code including 440 unit tests.

  []

* News

** 2008/05/07 ShapeLogic v 1.1 released
  
  * Base class for particle counters and analyzers
  
  * Simple particle counter implementation, finds average color and standard 
  deviation for each particle
  
  * There are several parameters that determins how the particle counter works
  
  * Color clustering
  
  * Background color finder
  
  * Particle image checker
  
  * Extend all the image processing algorithms in ShapeLogic to work in both 
  ImageJ and plain Java
  
  []
  
** 2008/03/05 ShapeLogic v 1.0 released

  * Rule for image processing have been migrated,
  previously they were implemented as goal driven tasks with sub tasks.
  Version 1.0 uses lazy streams which is simpler and more powerful.
  
  * Letter match example now matches all polygons instead of just the first found.
  
  * When running ShapeLogic as ImageJ plugin, it is now easy for users to define rules for 
  matching in external Java files.
  
  * New number matcher to demonstrate how to define rules for matching in 
  external Java file, 
  {{{http://code.google.com/p/shapelogic/source/browse/trunk/src/main/java/DigitStreamVectorizer_.java}in 130 lines of code}}.
  
  * Enabled use of
  {{{http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html}
  Java 6 Scripting}}
  for rule database, which gives the user access to the 25 scripting 
  languages that are supported

  * ShapeLogic now has beta development status
  
  * Many unit tests added for Lazy Stream library

  * Fixed bugs in Lazy Stream library

  * Fixed bugs for the letter X

  []
  
  Documentation will soon be updated to reflect ShapeLogic 1.0.

* Future plans for ShapeLogic
  
  For more up to date information on ongoing development work look at these 
  
  * Blog {{{http://samibadawi.blogspot.com} Declarative Computer Vision}} 
  
  * {{{roadmap.html} Roadmap}}
  
  []

** ShapeLogic v 1.1 with particle counter example soon to be released

  The main goal for 1.1 is to create an automatic color and gray scale 
  {{{particle.html} particle counter example}}. 
  This is the first use of ShapeLogic in medical image processing.
  There are currently particle counters available for ImageJ, however, ShapeLogic's 
  particle counter will utilize declarative programming tools for a color image processing 
  problem, making it function without manual user intervention.
  
  The test images are taken from the sample images from ImageJ
  
[images/particles/blobs.gif] 

  blobs.gif

[images/particles/Cell_Colony.jpg] 

  Cell_Colony.jpg

[images/particles/embryos.jpg] 

  embryos.jpg
  
  The secondary goal is to {{{image-formats.html} decouple ShapeLogic's}} 
  image processing algorithms 
  from ImageJ. The idea is not to redo ImageJ's functionality but to make 
  ShapeLogic more modular. All of ShapeLogic's current image processing 
  algorithms only use very simple image properties so they should apply outside 
  of ImageJ.
  
*** Other changes to ShapeLogic v 1.1
  
  * Fix bug in segmentation that causes stripes and slowness in big images
  
  * Add unit tests for segmentation
  
  * Color clustering
  
  * Better support for {{{setup.html#NetBeans}NetBeans}}
  
  []
  
* Examples applications
  
  [[1]] {{{letter-match.html}Letter matching example}}. Very rudimentary OCR.
  
  [[1]] {{{project-euler.html}mathematical problems}} from 
  {{{http://projecteuler.net}Project Euler}}. 
  This is a list of 186 mathematical problems that can be solved by computers.
  They vary in complexity from simple to hard.
  The goal is to test ShapeLogic's new declarative and functional constructs on real 
  problems and make sure they are terse and intuitive.
  
  [[1]] Next example will be an an automatic color and gray scale {{{particle.html}particle counter}}, 
  first medical image processing example
  
  []
  