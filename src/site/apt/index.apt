
            ------
            ShapeLogic
            ------
            Sami Badawi
            ------
            2007/08/06

ShapeLogic

  ShapeLogic is an open source toolkit for declarative programming, image 
  processing and computer vision.
  Started August 2007.
  
  The first real application for ShapeLogic is a 
  {{{particle.html}particle analyzer}}. 
  It will find and categorize particles on a relatively uniform background then 
  make a report of geometric properties for each of the particles. The main 
  application is for recognizing cells in medical image processing.
  
  Code hosted on {{http://code.google.com/p/shapelogic/}}.
  From there you can download both source files and binary distributions.  
  
  Join the {{{http://groups.google.com/group/shapelogic}ShapeLogic mailing list}} 
  for announcements, questions, bug reports, suggestions and feature requests.
  You can help improving the stability of ShapeLogic by filing a bug report.
  
* Main ideas and motivation

  ShapeLogic is a library for
   
  * {{{general-declarative.html} Declarative programming}} and lazy computations in Java
   
  * Image processing and computer vision
  
  *{{{particle.html}Particle analyzer}} for microscopy and medical image processing
  
  []
  
  While ShapeLogic's declarative programming system was initially developed 
  for image processing and computer vision, it is widely applicable.
  It is currently difficult to combine declarative programming and image processing.
  ShapeLogic is intended as basic plumbing software that turns a logic engine 
  into a simple plugin component to ease entry into vision and image 
  analysis. ShapeLogic also fills gaps missing from current Java image 
  processing libraries, and uses a commercially friendly license.
  
  ShapeLogic has an automatic color {{{particle.html}particle analyzer}} and a
  {{{letter-match.html}letter matching example}}.

* Features

  * Declarative lazy stream driven logic engine with lazy computations
  
  * Specialized for the domain of image processing and computer vision
  
  * The user can store rules in either a flat file or database, decreasing user 
  reliance on Java programming
  
  * User rules are written with Java or the Java 6 Scripting interface JSR 223.   
  {{{http://groovy.codehaus.org}Groovy}}, 
  {{{http://jruby.codehaus.org}JRuby}}, 
  {{{http://www.mozilla.org/rhino}JavaScript}} have been tested 
  
  * Implementation of 2D geometry primitives, vectorization and segmentation
  
  * It is free (as in free speech and free beer)
  
  * Commercially friendly MIT open source software license, also called the X11 License
  
  * Annotations of point as different type of junctions, end points, hard or soft points

  * Annotations of lines as straight, curved, concave or inflection points

  * Programmed in Java
  
  * Can be used as a plugin for ImageJ, the leading Java open source project 
  used in medical image processing
  
  []

*  Particle analyzer

  ShapeLogic 1.3 contains a {{{particle.html}color particle analyzer}}.
  
  Here is an example particle image embryos.jpg
    
[images/particles/embryos.jpg] 
  
  Here is the result of running the non-customized particle analyzer on it.

[images/particles/particleAnalyzerResult.png]
  
  The categories for the particles are only examples, it is easy to 
  setup different rules for categorizing particles.
  
  In ShapeLogic 1.4 there will be custom rules to  
  {{{cell.html}categorize specific cells}} and it will be tested further.
  
  ShapeLogic 1.3 also contains the second version of a color particle counter. 
  It also prints a smaller report of the particle's properties.
  
[images/particles/particleCounterResult.png]
  
*  Requirements
  
  To run as a library for functional and declarative programming there are 
  no requirements.
  
  To run as an ImageJ plugin ShapeLogic uses the following libraries:
  
  * {{{http://rsb.info.nih.gov/ij/} ImageJ}} ShapeLogic can either run as a 
  plugin in popular ImageJ framework or stand alone in pure Java2D

  * {{{http://commons.apache.org/math/} Commons math}}: Math library for geometry

  * {{{http://www.antlr.org/} Antlr}}: For parsing build in filter language

  []
  
  You can run all current image processing algorithms 
  {{{image-formats.html}outside ImageJ}}, 
  using just a BufferedImage should you want to embed ShapeLogic in your 
  application.
  
** Optional requirements
  
  These are used in unit tests, builds or old versions of image processing 
  functionalities: 
  
  * {{{http://maven.apache.org/} Maven 2}}: Build system

  * {{{http://commons.apache.org/} Apache commons}}: {{{http://commons.apache.org/jexl/} JEXL}}, 
  {{{http://commons.apache.org/beanutils/} beanutils}}: For first version logic rules interpreter

  * {{{http://groovy.codehaus.org}Groovy}}, 
  {{{http://jruby.codehaus.org}JRuby}}, 
  {{{http://www.mozilla.org/rhino}JavaScript}}: 
  For second version logic rules interpreter

  * {{{http://www.hibernate.org/} Hibernate}} or JDBC: For database access
  
  * {{{http://code.google.com/p/google-guice/} Google Guice}}: Lightweight IoC framework
  
  * {{{http://hsqldb.org/} HSQLDB}} or {{{http://www.h2database.com/} H2}}: Embedded databases
  
  []
  
* Development Status: Beta

  * ShapeLogic is in Beta, as of version 1.0.

  * {{{particle.html} Particle counter and particle analyzer}} working directly 
  on color images without manual user intervention.

  * Working example where ShapeLogic is used for matching capital letters.
  
  * Image processing algorithms now work both in 
  {{{image-formats.html}ImageJ and on Java's BufferedImage}}.

  * The API is still under development.

  * Contains a framework for declarative and functional programming.

  * ShapeLogic currently consists of 32,000 lines of Java code including 480 unit tests.

  []

* News

** 2008/09/03 Start of experimental port from Java to C++
  
  An {{{cpp.html} experimental port of ShapeLogic to C++}} has begun.
  The algorithms in ShapeLogic are not using anything too language-specific so
  they should be portable to similar languages, e.g. C++ and C#.
  The idea with ShapeLogic is that it should be a declarative framework for
  vision and you should be able to get work done by making rules instead of 
  regular procedural or object oriented programming.
  For example, one should be able to make a list of rules for categorizing 
  the shape of a particle in the particle analyzer. You put them in a database or 
  a flat file and the same rules should work for C++ and Java version of 
  ShapeLogic.

** 2008/08/02 ShapeLogic v 1.3 released
  
  * {{{particle.html} Particle analyzer}} now has a {{{particle.html#rgb} manual color mode}}, 
  where you can set either the foreground or background color, in addition to 
  the automatic mode introduced in v 1.2
  
  * New edge tracer for particle analyzer, in v 1.2 the wrong perimeter lengths 
  are sometimes found  
  
  * Built for JDK 1.5 / Java 5 so it should work on the Mac without updates
  
  []
  
  Documentation will soon be updated to reflect ShapeLogic 1.3.
  
* Future plans for ShapeLogic
  
  For more up to date information on ongoing development work look at these 
  
  * Blog {{{http://samibadawi.blogspot.com} Declarative Computer Vision}} 
  
  * {{{roadmap.html} Roadmap}}
  
  []

** ShapeLogic v 1.4 with specific cell recognition particle analyzer soon to be released

  * {{{component.html}Component framework}} for hybrid and complex vision problems
  
  * Make custom rules to recognize specific {{{cell.html}cells}}. 
  In v 1.3 the user has to make rules themselves. Mainly pending finding a 
  relevant test case.
  
  * Make it easier to select which particle properties to print out, currently a 
  random selection of somewhat useful properties has been selected.
  
  * HSV mode for the particle analyzer
  
  * Possibly {{{http://ei.cs.vt.edu/~history/Perceptrons.Estebon.html}Perceptron styled}}
  1 layered neural network for rules for particle analyzer
  
  * Improve the color replacer plugin, to take separate RGB values as input
  
  []

  The test images are taken from the sample images from ImageJ
  
[images/particles/blobs.gif] 

  blobs.gif

[images/particles/Cell_Colony.jpg] 

  Cell_Colony.jpg

[images/particles/embryos.jpg] 

  embryos.jpg
  
* Examples applications
  
  [[1]] Automatic color and gray scale {{{particle.html}particle counter and analyzer}}, 
  first medical image processing example.
  
  [[1]] {{{letter-match.html}Letter matching example}}. Very rudimentary OCR.
  
  [[1]] {{{project-euler.html}Mathematical problems}} from 
  {{{http://projecteuler.net}Project Euler}}. 
  This is a list of 193 mathematical problems that can be solved by computers.
  They vary in complexity from simple to hard.
  The goal is to test ShapeLogic's new declarative and functional constructs on real 
  problems and make sure they are terse and intuitive.
  
  []
  