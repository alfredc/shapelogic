            ------
            ShapeLogic
            ------
            Sami Badawi
            ------
            2007/08/06

ShapeLogic

  ShapeLogic is an open source toolkit for declarative programming, image 
  processing and computer vision.
  Started August 2007.
  
  Code hosted on {{http://code.google.com/p/shapelogic/}}.
  From there you can download both source files and binary distributions.  
  
  Project home page {{http://www.shapelogic.org/}} is currently a work in 
  progress.
  
* Main ideas and motivation

  ShapeLogic is a library for
   
  * Declarative programming and lazy computations in Java
   
  * Image processing and computer vision
  
  []
  
  While ShapeLogic's declarative programming system was initially developed 
  for image processing and computer vision, it is widely applicable.
  It is currently difficult to combine declarative programming and image processing.
  ShapeLogic is intended as basic plumbing software that turns a logic engine 
  into a simple plugin component to ease entry into vision and image 
  analysis. ShapeLogic also fills gaps missing from current Java image 
  processing libraries, and uses a commercially friendly license.
  
  The current ShapeLogic working example demonstrates capital letter matching.  
  Future, differing, examples to come.

*  Features

  * Declarative goal driven logic engine with lazy computations
  
  * Specialized for the domain of image processing and computer vision
  
  * The user can store rules in either a flat file or database, decreasing user 
  reliance on Java programming
  
  * Implementation of 2D geometry primitives, vectorization and segmentation
  
  * It is free (as in free speech and free beer)
  
  * Commercially friendly MIT open source software license, also called the X11 License
  
  * Annotations of point as different type of junctions, end points, hard or soft points

  * Annotations of lines as straight, curved, concave or inflection points

  * Programmed in Java
  
  * Can be used as a plugin for ImageJ, the leading Java open source project used in medical image processing
  
  []

*  Requirements

  ShapeLogic uses the following libraries:
  
  * {{{http://rsb.info.nih.gov/ij/} ImageJ}} ShapeLogic is built on top of the 
  popular ImageJ framework, but could easily stand alone

  * {{{http://commons.apache.org/} Apache commons}}: {{{http://commons.apache.org/jexl/} JEXL}}, 
  {{{http://commons.apache.org/beanutils/} beanutils}}: For embedded logic language 

  * {{{http://commons.apache.org/math/} commons math}}: Math library

  * {{{http://www.antlr.org/} Antlr}}: For parsing build in logic language

  * {{{http://www.hibernate.org/} Hibernate}} or JDBC: For database access
  
  * {{{http://code.google.com/p/google-guice/} Google Guice}}: Lightweight IoC framework
  
  * {{{http://hsqldb.org/} HSQLDB}} or {{{http://www.h2database.com/} H2}}: Embedded databases
  
  * {{{http://maven.apache.org/} Maven 2}}: build system

  []
  
* Development Status: Alpha

  * ShapeLogic is in Alpha, as of version 0.7.

  * There is a working example where ShapeLogic is used for matching capital letters.

  * The API is still under development.

  * ShapeLogic v 0.8 consists of around 16,000 lines of Java code including 190 unit tests.

  []

* News

** 2007/12/07 ShapeLogic v 0.8 released

  * Documentation site created, checked into SVN.

  * Javadoc added to documentation site.

  * Syntax simplified for matching rules at the lowest level.

  * "Smaller" comparison added to logical expression.
        
  * Letter recognition example cleaned up

  []

* Future plans for ShapeLogic
  
  For more up to date information on ongoing development work look at these 
  
  * Blog {{{http://samibadawi.blogspot.com} Declarative Computer Vision}} 
  
  * {{{roadmap.html} Roadmap}}
  
  []

** ShapeLogic v 0.9 soon to be released

  This will be a major release, where ShapeLogic will move beyond current 
  parameters as a library for the letter match example.  
  The improved system will be for declarative programming where the user can 
  define rules in either a database or flat file. 
  The focus will still be on image processing and computer vision, but the 
  system will be more broadly applicable.
  
  * Better integration of external user defined rule databases
  
  * Possibly move expression language from JEXL to 
  {{{http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html}Java 6 Scripting}}

  * Implement lazy data streams like {{{http://www.scala-lang.org} Scala}} or Scheme

  * Make the annotation of shapes more loosely coupled

  * Use Or tasks

  * Finish Javadoc for ShapeLogic 

  []

** Next example

  The next example application for ShapeLogic will be 
  medical image processing.
