            ------
            ShapeLogic
            ------
            Sami Badawi
            ------
            2007/08/06

ShapeLogic

  ShapeLogic is an open source toolkit for declarative programming, image 
  processing and computer vision.
  Started August 2007.
  
  Code hosted on {{http://code.google.com/p/shapelogic/}}.
  From there you can download both source files and binary distributions.  
  
  Project home page {{http://www.shapelogic.org/}} is currently a work in 
  progress.
  
* Main ideas and motivation

  ShapeLogic is a library for
   
  * {{{general-declarative.html} Declarative programming}} and lazy computations in Java
   
  * Image processing and computer vision
  
  []
  
  While ShapeLogic's declarative programming system was initially developed 
  for image processing and computer vision, it is widely applicable.
  It is currently difficult to combine declarative programming and image processing.
  ShapeLogic is intended as basic plumbing software that turns a logic engine 
  into a simple plugin component to ease entry into vision and image 
  analysis. ShapeLogic also fills gaps missing from current Java image 
  processing libraries, and uses a commercially friendly license.
  
  The current ShapeLogic working example demonstrates capital letter matching.  
  Future, differing, examples to come.

* Features

  * Declarative lazy stream driven logic engine with lazy computations
  
  * Specialized for the domain of image processing and computer vision
  
  * The user can store rules in either a flat file or database, decreasing user 
  reliance on Java programming
  
  * User rules are written with the Java 6 Scripting interface JSR 223, 
  {{{http://groovy.codehaus.org}Groovy}}, 
  {{{http://jruby.codehaus.org}JRuby}}, 
  {{{http://www.mozilla.org/rhino}JavaScript}} have been tested 
  
  * Implementation of 2D geometry primitives, vectorization and segmentation
  
  * It is free (as in free speech and free beer)
  
  * Commercially friendly MIT open source software license, also called the X11 License
  
  * Annotations of point as different type of junctions, end points, hard or soft points

  * Annotations of lines as straight, curved, concave or inflection points

  * Programmed in Java
  
  * Can be used as a plugin for ImageJ, the leading Java open source project 
  used in medical image processing
  
  []

*  Requirements

  ShapeLogic uses the following libraries:
  
  * {{{http://rsb.info.nih.gov/ij/} ImageJ}} ShapeLogic is built on top of the 
  popular ImageJ framework, but could easily stand alone

  * {{{http://commons.apache.org/} Apache commons}}: {{{http://commons.apache.org/jexl/} JEXL}}, 
  {{{http://commons.apache.org/beanutils/} beanutils}}: For embedded logic language 

  * {{{http://commons.apache.org/math/} commons math}}: Math library

  * {{{http://www.antlr.org/} Antlr}}: For parsing build in logic language

  * {{{http://www.hibernate.org/} Hibernate}} or JDBC: For database access
  
  * {{{http://code.google.com/p/google-guice/} Google Guice}}: Lightweight IoC framework
  
  * {{{http://hsqldb.org/} HSQLDB}} or {{{http://www.h2database.com/} H2}}: Embedded databases
  
  * {{{http://maven.apache.org/} Maven 2}}: build system

  []
  
* Development Status: Beta

  * ShapeLogic is in Beta, as of version 1.0.

  * There is a working example where ShapeLogic is used for matching capital letters.

  * The API is still under development.

  * The framework for declarative and functional programming is being developed.

  * ShapeLogic currently consists of 25,000 lines of Java code including 380 unit tests.

  []

* News

** 2008/03/05 ShapeLogic v 1.0 released

  * Migrate rule databases for image processing. 
  Currently they are implemented as goal driven tasks with sub tasks.
  Version 1.0 uses the lazy streams that is simpler and more powerful.
  
  * Letter match example now matches all polygons instead of just the first.
  
  * When running ShapeLogic as ImageJ plugin, make it easy to define rules for 
  matching in external Java file.
  
  * New number matcher to demonstrate how to define rules for matching in external Java file.
  
  * Enabled use of
  {{{http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html}
  Java 6 Scripting}}
  for rule database, this should give the user access to the 25 scripting 
  languages that are supported

  * Get ShapeLogic into beta stage
  
  * Add many unit tests for Lazy Stream library

  * Fix bugs in Lazy Stream library

  * Fix bugs for the letter X

  []
  
  Documentation will soon be updated to reflect ShapeLogic 1.0.

* Future plans for ShapeLogic
  
  For more up to date information on ongoing development work look at these 
  
  * Blog {{{http://samibadawi.blogspot.com} Declarative Computer Vision}} 
  
  * {{{roadmap.html} Roadmap}}
  
  []

** ShapeLogic v 1.1 soon to be released

  ShapeLogic 1.1 should have less dramatic changes than 0.8, 0.9 and 1.0.
  
  The lazy stream declarative programming framework seem to be very easy to use
  and powerful enough to handle the letter match example. Make it more solid. 
  Try to see if it can handle more complicated logic.
  
*** Potential changes
  
  * Simple image processing example working on color images
  
  * Example where ShapeLogic declarative programming is used with other libraries
  
  * Expanded unit testing
  
  * Bug fixes
  
  * Better documentation
  
  * When running ShapeLogic as an plugin for ImageJ add a menu item for loading
  and running external rules either from flat file, database or macro format.
  
  * Make the annotation of shapes more loosely coupled

  []

* Examples applications
  
  [[1]] Letter matching example. Very rudimentary OCR.
  
  [[1]] Solve some {{{project-euler.html}mathematical problems}} from 
  {{{http://projecteuler.net}Project Euler}}. 
  It is a list of 178, mathematical problems, that can be solved by computers.
  They vary in complexity from simple to hard.
  The goal is to test ShapeLogic's new declarative and functional constructs on real 
  problems and make sure they are terse and intuitive.
  
  []
  
  The next example applications for ShapeLogic will be 
  
  Medical image processing
